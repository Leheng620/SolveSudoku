{"version":3,"sources":["component/Grid.js","component/LeftControl.js","component/RightControl.js","algorithm/sudoku.js","example/examples.js","App.js","index.js"],"names":["Grid","onlyDigit","k","v","document","getElementById","value","replace","getFontSize","checkRed","i","j","rowCheck","props","check","colCheck","boxCheck","a","length","b","lowerRow","Math","floor","upperRow","console","log","checkEmpty","original","id","this","board","red","empty","changeColor","changeTextColor","className","type","maxLength","onInput","onChange","change","style","height","fontSize","backgroundColor","color","Component","LeftControl","isChinese","navigator","language","slice","RightControl","textAlign","fontWeight","min","max","step","speed","changeSpeed","disabled","solving","onClick","begin","goBack","reset","getExample","hidden","showError","done","Board","free","countFree","move","push","count","Point","x","y","isValidSudoku","valid","rowInvalid","colInvalid","boxInvalid","m","n","solve","JSON","parse","stringify","state","backtrack","fillSquare","p","c","freeSquare","constructCandidate","possible","pos","leastCandidate","update","isASolution","buildExample1","example1","buildExample2","example2","buildExample3","example3","buildExample4","example4","App","haveSolution","componentDidMount","setState","window","addEventListener","h","clientHeight","changeGrid","e","target","targetGrid","indexOf","Number","sudoku","updateBoard","interval","setInterval","clearInterval","clear","closeDialog","example","examples","key","bind","getGrid","marginBottom","cursor","ReactDOM","render"],"mappings":"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","file":"static/js/main.77e97986.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Grid extends Component{\n\n    onlyDigit = (k) => {\n        let v = document.getElementById(\"input-\"+k).value;\n        document.getElementById(\"input-\"+k).value = v.replace(/[^\\d]/g,'');\n    }\n\n    getFontSize = (k) => {\n        if(!document.getElementById('input-'+k))\n            return \"\";\n        \n    }\n\n    checkRed = (i, j) => {\n\n        let rowCheck = this.props.check[0];\n        let colCheck = this.props.check[1];\n        let boxCheck = this.props.check[2];\n        for(let a = 0; a < rowCheck.length; a++){\n            if(i === rowCheck[a]){\n                return true;\n            }\n        }\n        for(let a = 0; a < colCheck.length; a++){\n\n            if(j === colCheck[a]){\n                return true;\n            }\n        }\n        for(let a = 0; a < boxCheck.length; a++){\n            let b = boxCheck[a];\n            let lowerRow = Math.floor(b/3)*3;\n            let upperRow = Math.floor(b/3)*3+3;\n            let lowerCol = b%3*3;\n            let upperCol = b%3*3+3;\n            if(lowerRow <= i && i < upperRow && lowerCol <= j && j < upperCol){\n                return true;\n            }\n            \n            \n            \n        }\n        console.log(this.props.check);\n        return false;\n    }\n\n    //If the grid is originally empty, set the text color to blue\n    checkEmpty = (i,j) => {\n        let original = this.props.original;\n        if(!original){\n            return false;\n        }\n        if(original[i][j] === ''){\n            return true;\n        }\n        return false;\n    }\n\n\n    render(){\n        let id = this.props.id;\n        let board = this.props.board;\n        let i,j;\n        let red = false;\n        let empty = false;\n        let changeColor = this.props.changeTextColor;\n        if(board && board.length !== 0){\n            i = Math.floor(id / 9);\n            j = id % 9;\n\n            if(!this.props.check[3]){\n                red = this.checkRed(i,j);\n            }else{\n                empty = this.checkEmpty(i,j);\n            }\n            \n        }\n        \n        return(\n            <div>\n                <div className='grid-item'>\n                    <input \n                    className={'grid-input ' + (board ? i%3===2 ? 'grid-bottom-border ':'':'')\n                    +(board ? i%3===0 ? 'grid-top-border ':'':'')\n                    +(board ? j%3===0 ? 'grid-left-border ':'':'')\n                    +(board ? j%3===2 ? 'grid-right-border':'':'')}\n                    id={\"input-\"+this.props.id}  \n                    type='text' maxLength='2' \n                    onInput={()=>{this.onlyDigit(this.props.id)}}\n                    onChange={this.props.change}\n                    value={board && board.length!==0 ? this.props.board[i][j] : \"\"}\n                    style={{height:'100%',fontSize:this.props.fontSize,\n                        backgroundColor:red?'lightsalmon':'',color: empty&&changeColor?'blue':''}} />\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Grid;","import React,{ Component } from 'react';\n\nclass LeftControl extends Component{\n    render(){\n        let lang = navigator.language.slice(0, 2);\n        let isChinese = lang === \"zh\"\n        return(\n            <div className='controls-container'>\n                {\n                    isChinese ?\n                    <div>\n                        <h4 className='left-ad-container'>\n                        &#9758; 调整运行速度可以具体观察回溯算法解题过程。速度是Max时结果都可以秒出。 <br />\n                        &#9758; 示例一是中等难度数独，建议速度0.97。<br />\n                        &#9758; 示例二是困难难度数独，建议速度0.99。<br />\n                        &#9758; 示例三是超级难度数独，0.999的速度仍要跑一分钟以上。<br />\n                        &#9758; 示例四无解。<br />\n                        &#9758; Go Back可以返回解题前的状态。 <br />\n                        &#9758; 如果给定的数独不是唯一解，将会根据算法得出第一个符合条件的答案。 <br /><br />\n                        </h4> <br />\n                    </div>\n                    :\n                    <div>\n                        <h4 className='left-ad-container'>\n                        &#9758; Adjust run speed can visualize the running time of the algorithm.\n                        If run speed is max, the result will be displayed immediately.<br />\n                        &#9758; Example 1 is medium difficulty, suggest run speed 0.97.<br />\n                        &#9758; Example 2 is hard difficulty, suggest run speed 0.99.<br />\n                        &#9758; Example 3 is the hardest difficulty, needs to run for about one minute even under run speed 0.999.<br />\n                        &#9758; Example 4 is not solvable.<br />\n                        &#9758; Go Back can revert the sudoku table before being solved. <br />\n                        &#9758; If there are more than one solutions, it will display the first one that the algorithm finds. <br /><br />\n                        </h4> <br />\n                    </div>\n\n\n                }\n\n            </div>\n        )\n    }\n}\n\nexport default LeftControl;","import React,{ Component } from 'react';\n\nclass RightControl extends Component{\n    render(){\n        let lang = navigator.language.slice(0, 2);\n        let isChinese = lang === \"zh\"\n        return(\n            <div className='controls-container'>\n               <div id='right-button-container'>\n                   <span style={{textAlign:'left',fontWeight:'bold'}}>{isChinese? \"运行速度\" : \"Run Speed\"}</span><br />\n                   <input className='control-slider' type='range' min='0.7' max='1' step='0.001' \n                    value={this.props.speed} onChange={this.props.changeSpeed} disabled={this.props.solving}/>\n\n                    <span>&#8592; {this.props.speed === 1 ? 'Max':this.props.speed} &#8594;</span><br />\n                   <button className='control-button' onClick={this.props.begin} disabled={this.props.solving}>\n                       Go!\n                    </button><br />\n                   <button className='control-button' onClick={this.props.goBack} disabled={this.props.solving}>\n                       Go Back\n                    </button><br />\n                   <button className='control-button' onClick={this.props.reset} disabled={this.props.solving}>\n                       Reset\n                    </button><br />\n                   <button className='control-button' id='example-1' disabled={this.props.solving} onClick={this.props.getExample}>\n                        {isChinese? \"示例一\" : \"Example 1\"}\n                    </button><br />\n                   <button className='control-button' id='example-2' disabled={this.props.solving} onClick={this.props.getExample}>\n                        {isChinese? \"示例二\" : \"Example 2\"}\n                    </button><br />\n                   <button className='control-button' id='example-3' disabled={this.props.solving} onClick={this.props.getExample}>\n                        {isChinese? \"示例三\" : \"Example 3\"}\n                    </button><br />\n                   <button className='control-button' id='example-4' disabled={this.props.solving} onClick={this.props.getExample}>\n                        {isChinese? \"示例四\" : \"Example 4\"}\n                    </button>\n                </div> \n                <div id='error-message' hidden={this.props.showError}>\n                    {isChinese? \"输入的数独不成立\" : \"Input sudoku is invalid\"}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default RightControl;","//This file contains the main algorithm\n//including checking if the soduku is valid\n//and the backtrack algorithm to solve soduku\n\nexport var done = false;\n\nclass Board{\n    constructor (board) {\n        this.board = board;\n        this.free = this.countFree();\n        this.move = [];\n        for(let i= 0; i < 81; i ++) {\n            this.move.push(null);\n        }\n    }\n\n    countFree(){\n        let count = 0;\n        for(let i = 0; i < 9; i++) {\n            for(let j = 0; j < 9; j++) {\n                if(this.board[i][j] === '') {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    \n}\nclass Point{\n    constructor (x, y) {\n        this.x = x;\n        this.y = y;\n    }\n    toString() {\n        return \"(\" + this.x + \",\" + this.y + \")\";\n    }\n}\n\nexport function isValidSudoku(board){\n    let valid = true;\n    let rowInvalid = [];\n    let colInvalid = [];\n    let boxInvalid = [];\n    for(let i = 0;i < 9;i++){\n        let rowCheck = [false,false,false,false,false,false,false,false,false];\n        let colCheck = [false,false,false,false,false,false,false,false,false];\n        let boxCheck = [false,false,false,false,false,false,false,false,false];\n        for(let j = 0;j< 9;j++){\n            if(board[i][j] !== ''){\n                if(rowCheck[board[i][j] - '1']) {\n                    rowInvalid.push(i);\n                    valid = false;\n                }\n                else{\n                    rowCheck[board[i][j] - '1'] = true;\n                }\n            }\n            if(board[j][i] !== ''){\n                if(colCheck[board[j][i] - '1']){\n                    colInvalid.push(i);\n                    valid = false;\n                }\n                else{\n                    colCheck[board[j][i] - '1'] = true;\n                }\n            }\n            let m = Math.floor(i/3)*3 + Math.floor(j/3);\n            let n = i%3*3 + j%3;\n            if(board[m][n] !== '') {\n                if(boxCheck[board[m][n] - '1']){\n                    boxInvalid.push(i);\n                    valid = false;\n                }\n                else{\n                    boxCheck[board[m][n] - '1'] = true;\n                }\n            }\n        }\n    }\n    return [rowInvalid,colInvalid,boxInvalid,valid];\n}\n\nexport const solve = (board) => {\n    let b = new Board(JSON.parse(JSON.stringify(board)));\n    done = false;\n    let state = [];\n    backtrack(b,-1,state);\n    return state;\n}\n\nconst update = (board, p) => { \n    //update the board condition, determine next square to be filled in and possible value.\n    let pos = [];\n    let leastCandidate = 10;\n    for(let i = 0; i < 9; i++) {\n        for(let j = 0; j < 9; j++) {\n            if(board[i][j] === '') {\n                let possible = [];\n                for(let a = 0; a < 9; a++) {\n                    possible.push(true);\n                }\n                //Determine possible values to be filled in.\n                for(let a = 0; a < 9; a++) {\n                    if(board[i][a] !== ''){\n                        possible[board[i][a]-'1'] = false;\n                    }\n                }\n                for(let a = 0; a < 9; a++){\n                    if(board[a][j] !== ''){\n                        possible[board[a][j]-'1'] = false;\n                    }\n                }\n                for(let a = Math.floor(i/3)*3; a < Math.floor(i/3)*3+3; a++) {\n                    for(let b = Math.floor(j/3)*3; b< Math.floor(j/3)*3+3; b++) {\n                        if(board[a][b] !== ''){\n                            possible[board[a][b]-'1'] = false;\n                        }\n                    }\n                }\n                let min = 0; //count candidates\n                for(let a = 0; a < 9; a++) {\n                    if(possible[a]){\n                        min++;\n                    }\n                }\n                if(min === 0) { //error condition, previous move is impossible in the solution\n                    p.x = -1; \n                    p.y = -1;\n                    return 0;\n                }\n                if(min < leastCandidate) { //find the square with most constraints.\n                    leastCandidate = min;\n                    p.x = i; \n                    p.y = j;\n                    pos = JSON.parse(JSON.stringify(possible));//deep copy possible solution\n                }\n                \n            }\n        }\n    }\n    return pos;\n}\n\nconst fillSquare = (b, p, c,state) => {\n    b.board[p.x][p.y] = c;\n    state.push(JSON.parse(JSON.stringify(b.board)));\n    b.free--;\n}\n\nconst freeSquare = (b, p,state) => {\n    b.board[p.x][p.y] = '';\n    state.push(JSON.parse(JSON.stringify(b.board)));\n    b.free++;\n}\n\nconst processSolution = (b) => {\n    done = true;\n}\n\nconst isASolution = (b) => {\n    return b.free === 0;\n}\n\nconst constructCandidate = (b, k, p) => {\n    let possible = update(b.board,p);\n    if(p.x === -1) { //error condition, current solution is impossible\n        return [];\n    }\n    b.move[k] = p; //record every move.\n    let c = []; //construct candidates.\n    for (let i = 0; i < 9; i++) {\n        if(possible[i]) {\n            c.push(i+1+'');\n        }\n    }\n    return c;\n}\n\nconst backtrack = (b, k,state) => {\n    if(isASolution(b)) {\n        processSolution(b);\n    }else {\n        k++;\n        let p = new Point(-1, -1);\n        let c = constructCandidate(b, k, p);\n        for(let i = 0; i < c.length; i++) {\n            fillSquare(b,p,c[i],state);\n            backtrack(b,k,state);\n            if(done){\n                break;\n            }\n            freeSquare(b,p,state);\n        }\n        \n    }\n}\n","import example1 from './example1.json';\nimport example2 from './example2.json';\nimport example3 from './example3.json';\nimport example4 from './example4.json';\n\nexport const buildExample1 = () => {\n    return JSON.parse(JSON.stringify(example1.board));\n}\nexport const buildExample2 = () => {\n    return JSON.parse(JSON.stringify(example2.board));\n}\nexport const buildExample3 = () => {\n    return JSON.parse(JSON.stringify(example3.board));\n}\nexport const buildExample4 = () => {\n    return JSON.parse(JSON.stringify(example4.board));\n}","import React, { Component } from 'react';\nimport Grid from './component/Grid';\nimport LeftControl from './component/LeftControl';\nimport RightControl from './component/RightControl';\nimport * as sudoku from './algorithm/sudoku';\nimport * as examples from './example/examples';\n\nclass App extends Component{\n    state = {\n      board:[],\n      fontSize:\"\",\n      isValidSudoku:[[],[],[],true],\n      solving:false, //Is on solving sudoku\n      original:null, //The sudoku before solving\n      speed:1, //Running spped\n      changeTextColor:false, //Originally empty grids are blue after running\n      haveSolution:true, //If not sovlable, display dialog\n    }\n  \n  componentDidMount = () => {\n    let board = [];\n    for (let i = 0; i < 9; i++){\n      board[i] = [];\n      for(let j = 0; j < 9; j++){\n        board[i][j] = \"\";\n      }\n    }\n    this.setState({board:board});\n    // console.log('didmount')\n    window.addEventListener('resize',() => {\n        let h = document.getElementById('sudo_container').clientHeight/9;\n        this.setState({fontSize:h*0.6+'px'})\n    })\n    let h = document.getElementById('sudo_container').clientHeight/9;\n    this.setState({fontSize:h*0.6+'px'})\n  }\n\n  getGrid(){\n    let a = [];\n    for(let i = 0; i < 81; i++){\n      a.push(<Grid key={i} id={i} board={this.state.board} \n        fontSize={this.state.fontSize} check={this.state.isValidSudoku} \n        change={this.changeGrid.bind(this)} original={this.state.original}\n        changeTextColor={this.state.changeTextColor} />);\n    }\n    return a;\n  }\n\n  changeGrid = (e) =>{\n    let id = e.target.id;\n    let targetGrid = id.slice(id.indexOf('-')+1);\n    targetGrid = Number(targetGrid);\n    let i = Math.floor(targetGrid / 9);\n    let j = targetGrid % 9;\n    let board = this.state.board;\n    if(e.target.value.indexOf(\"0\") !== -1){\n        board[i][j] = \"\";\n        this.setState({board: board, changeTextColor:false});\n    }\n    else if(e.target.value.length === 2){\n        board[i][j] = e.target.value.slice(1);\n        this.setState({board: board, changeTextColor:false});\n    }else{\n        board[i][j] = e.target.value;\n        this.setState({board: board, changeTextColor:false});\n    }\n  }\n\n  begin = () =>{\n    let isValidSudoku = sudoku.isValidSudoku(this.state.board);\n    let isValid = isValidSudoku[3];\n    if(!isValid){\n        this.setState({isValidSudoku: isValidSudoku})\n        // console.log(isValidSudoku);\n    }else{\n        this.setState({\n          isValidSudoku: [[],[],[],true],\n          solving:true,\n          original:this.state.board,\n          changeTextColor:true,\n        })\n        let state = sudoku.solve(this.state.board);\n        this.updateBoard(state);\n    }\n  }\n\n  updateBoard = (state) => {\n    let i = 0;\n    let speed = this.state.speed;\n    if(state.length === 0) {\n      this.setState({solving:false})\n      return;\n    }\n    \n    if(speed === 1){ //Solve Instantly\n      this.setState({\n        board: state[state.length-1],\n        solving: false,\n        haveSolution:sudoku.done,\n      });\n      return;\n    }\n    let interval = setInterval(()=>{\n      this.setState({board:state[i]},()=>{i++})\n      if(i === state.length){\n        clearInterval(interval);\n        this.setState({solving:false,haveSolution:sudoku.done})\n      }\n    }, (1-speed)*1000)\n  }\n\n  reset = () => {\n    let board = this.state.board;\n    this.clear(board);\n    this.setState({\n      board: board,\n      original: board,\n      changeTextColor:false,\n      isValidSudoku:[[],[],[],true]\n    });\n  }\n\n  clear = (board) => {\n    for(let i = 0; i < 9; i++){\n      for(let j = 0; j < 9; j++){\n        board[i][j] = \"\";\n      }\n    }\n  }\n\n  goBack = () => {\n    if(this.state.original){\n      this.setState({\n        board: this.state.original,\n        changeTextColor:false,\n        isValidSudoku:[[],[],[],true]\n      });\n    }\n  }\n\n  changeSpeed = (e) => {\n    this.setState({speed: Number(e.target.value)});\n  }\n\n  closeDialog = () =>{\n    this.setState({haveSolution:true});\n  }\n\n  getExample = (e) =>{\n    let example = e.target.id.slice(e.target.id.indexOf('-')+1);\n    example = Number(example);\n    switch(example){\n      case 1: \n        this.setState({board: examples.buildExample1(),changeTextColor:false}); break;\n      case 2:\n          this.setState({board: examples.buildExample2(),changeTextColor:false}); break;\n      case 3:\n          this.setState({board: examples.buildExample3(),changeTextColor:false}); break;\n      case 4:\n          this.setState({board: examples.buildExample4(),changeTextColor:false}); break;\n\n    }\n  }\n\n  render(){\n    let lang = navigator.language.slice(0, 2);\n    let isChinese = lang === \"zh\"\n    return(\n      <div>\n        <div id='main-container'>\n          <div className='controls panels'>\n            <LeftControl />\n          </div>\n          <div id=\"sudo_container\" className='panels'>\n            {this.getGrid()}\n          </div>\n          <div className='controls panels'>\n            <RightControl \n              begin={this.begin} \n              reset={this.reset}\n              goBack={this.goBack}\n              getExample={this.getExample}\n              changeSpeed={this.changeSpeed}\n              showError={this.state.isValidSudoku[3]}\n              solving={this.state.solving}\n              speed={this.state.speed}\n              />\n          </div>\n        </div>\n        <div id='block' hidden={this.state.haveSolution}>\n          <div id='message'>\n            <h3>{isChinese? \"无解\" : \"Not solvable\"}</h3>\n            <button onClick={this.closeDialog} style={{marginBottom:'2%',cursor:'pointer'}}>Close</button>\n          </div>\n        </div>\n        \n      </div>\n    )\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './css/sudo.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}